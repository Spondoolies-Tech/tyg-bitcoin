#!/bin/bash

# Copyright 2014 remo@spondoolies-tech.com
# updated        dima@spondoolies-tech.com

. $(dirname $0)/constants

function valid_subnet()
{
    local  ip=$1
    local  stat=1

    if [[ $ip =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
        OLDIFS=$IFS
        IFS='.'
        ip=($ip)
        IFS=$OLDIFS
        [[ ${ip[0]} -le 255 && ${ip[1]} -le 255 \
            && ${ip[2]} -le 255 && ${ip[3]} -eq 0 ]]
        stat=$?
    fi
    return $stat
}

function split_ip()
{
	local iptext=$1
	OLDIFS=$IFS
	IFS='.'
	read -ra sub_ip <<< "${iptext}"
	IFS=$OLDIFS
}

LIST_OF_EXPOSED_MINERS=/tmp/full-`date +%m.%d.%Y_%H-%M-%S`

# check that we have 2 parameters: first subnet in range and
# number of subnets
if [ ! "$#" -eq 2 ]
then
    echo "Wrong number of parameters"
    echo "please run: $0 [first subnet in range] [number of subnets] # Class C only"
    echo "example: $0 192.168.1.0 5 # will scan 192.168.{1..5}.0 range"
    exit 1
fi

# we are working on class C only currently
FIRST_SUBNETS_IN_RANGE=$1
SUBNETS_RANGE=$2

split_ip ${FIRST_SUBNETS_IN_RANGE}

# check that we have subnet
for i in {0..3}
do
echo "${sub_ip[${i}]}"
    if [ -z "${sub_ip[${i}]}" ]
    then
        echo "bad subnet format"
        exit 1
    fi
done


# calculate value of last subnet 
let last_subnet_ip_index=${sub_ip[2]}+${SUBNETS_RANGE}-1

echo  "last_subnet_ip_index  = $last_subnet_ip_index"
# check and generate subnets ips file
IPS_FILE="/tmp/IPS-${sub_ip[0]}_${sub_ip[1]}_${sub_ip[2]}_${last_subnet_ip_index}"
if [ ! -f "${IPS_FILE}" ]
then
  echo "Creating IPS file ${IPS_FILE}"
  for subnet in $(eval echo "${sub_ip[0]}.${sub_ip[1]}.{${sub_ip[2]}..${last_subnet_ip_index}}")
  do
    for ip in {0..255}
    do
#      echo "${subnet}.${ip} => ${IPS_FILE}"
      echo ${subnet}.${ip} >> ${IPS_FILE}
    done
  done
else
  echo "IPS File ${IPS_FILE} Exist"
fi
echo "######## SCANNING SUBNETS ${sub_ip[1]}.${sub_ip[2]}.{${sub_ip[3]}..${last_subnet_ip_index}} #############"
createdetected ${IPS_FILE} ${LIST_OF_EXPOSED_MINERS}

# lets print path for results
echo "file with IP ranges - ${IP_RANGES_OUTPUT_FILE}"
echo "file with miners status - ${LIST_OF_EXPOSED_MINERS}"
